// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  id            Int            @id @default(autoincrement())
  name          String
  projectId     String  @map("project_id")
  project       Project @relation(fields: [projectId], references: [id])
  project_users Project_User[]

  @@map("role")
}

model Project {
  id            String         @id @default(uuid())
  name          String
  description   String?
  published     Boolean        @default(false)
  createdAt     DateTime       @default(now()) @map("created_at")
  updatedAt     DateTime       @default(now()) @map("updated_at")
  sprint        Sprint[]
  tasks         Task[]
  projectUsers  Project_User[]
  taskStatus    TaskStatus[]

  @@map("project")
}

model App_User {
  id            String         @id @default(uuid())
  name          String
  email         String         @unique
  password      String
  activated     Boolean        @default(false)
  updatedAt     DateTime       @default(now()) @map("created_at")
  createdAt     DateTime       @default(now()) @map("updated_at")
  tasks         Task[]
  project_users Project_User[]

  @@map("app_user")
}

model Project_User {
  id        Int     @id @default(autoincrement())
  project   Project @relation(fields: [projectId], references: [id])
  user      App_User    @relation(fields: [userId], references: [id])
  roles     Role    @relation(fields: [roleId], references: [id])
  roleId    Int     @map("role_id")
  projectId String  @map("project_id")
  userId    String  @map("user_id")

  @@map("project_user")
}

model Sprint {
  id          String   @id @default(uuid())
  startDate   DateTime @map("start_date")
  endDate     DateTime @map("end_date")
  description String?
  project     Project  @relation(fields: [projectId], references: [id])
  projectId   String   @map("project_id")
  tasks       Task[]

  @@map("sprint")
}

model TaskStatus {
  id        String  @id @default(uuid())
  name      String
  tasks     Task[]
  Project   Project @relation(fields: [projectId], references: [id])
  projectId String


  @@map("taskstatus")
}

model Task {
  id          String      @id @default(uuid())
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @default(now()) @map("updated_at")
  status      TaskStatus? @relation(fields: [statusId], references: [id])
  statusId    String?     @map("status_id")
  sprint      Sprint?     @relation(fields: [sprintId], references: [id])
  sprintId    String?     @map("sprint_id")
  project     Project     @relation(fields: [projectId], references: [id])
  projectId   String      @map("project_id")
  assignee    App_User?       @relation(fields: [userId], references: [id])
  userId      String?     @map("user_id")
  title       String
  points      Int?
  priority    String?
  description String?

  @@map("task")

}
